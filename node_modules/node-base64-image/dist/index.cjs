"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var index_exports = {};
__export(index_exports, {
  decode: () => decode,
  encode: () => encode
});
module.exports = __toCommonJS(index_exports);
var import_axios = __toESM(require("axios"), 1);
var import_fs = require("fs");
var import_util = require("util");
var read = (0, import_util.promisify)(import_fs.readFile);
var write = (0, import_util.promisify)(import_fs.writeFile);
function encode(_0) {
  return __async(this, arguments, function* (url, opts = { string: false, timeout: 5e3 }) {
    try {
      if (!url || url === "") {
        return Promise.reject(new Error("URL is a required parameter"));
      }
      if (opts.local) {
        const fileBuf = yield read(url);
        return opts.string ? fileBuf.toString("base64") : fileBuf;
      }
      const { data, status } = yield (0, import_axios.default)(url, {
        responseType: "arraybuffer",
        headers: opts.headers,
        timeout: opts.timeout
      });
      if (data && status >= 200 && status < 302) {
        const buf = Buffer.from(data, "base64");
        return opts.string ? buf.toString("base64") : buf;
      }
      return Promise.reject(new Error("empty body and/or wrong status code"));
    } catch (err) {
      if (err) {
        return Promise.reject(err);
      }
      return Promise.reject(new Error("unknown error in encode"));
    }
  });
}
function decode(imgBuffer, opts) {
  return __async(this, null, function* () {
    try {
      if (!imgBuffer || imgBuffer === "" || !opts.fname || !opts.ext) {
        return Promise.reject(new Error("image buffer, filename and extension are required parameters"));
      }
      if (typeof imgBuffer === "string") {
        imgBuffer = Buffer.from(imgBuffer, "base64");
      }
      yield write(`${opts.fname}.${opts.ext}`, imgBuffer, "base64");
      return "file written successfully to disk";
    } catch (err) {
      if (err) {
        return Promise.reject(err);
      }
      return Promise.reject(new Error("unknown error in decode"));
    }
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decode,
  encode
});
