var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
import axios from "axios";
import { readFile, writeFile } from "fs";
import { promisify } from "util";
var read = promisify(readFile);
var write = promisify(writeFile);
function encode(_0) {
  return __async(this, arguments, function* (url, opts = { string: false, timeout: 5e3 }) {
    try {
      if (!url || url === "") {
        return Promise.reject(new Error("URL is a required parameter"));
      }
      if (opts.local) {
        const fileBuf = yield read(url);
        return opts.string ? fileBuf.toString("base64") : fileBuf;
      }
      const { data, status } = yield axios(url, {
        responseType: "arraybuffer",
        headers: opts.headers,
        timeout: opts.timeout
      });
      if (data && status >= 200 && status < 302) {
        const buf = Buffer.from(data, "base64");
        return opts.string ? buf.toString("base64") : buf;
      }
      return Promise.reject(new Error("empty body and/or wrong status code"));
    } catch (err) {
      if (err) {
        return Promise.reject(err);
      }
      return Promise.reject(new Error("unknown error in encode"));
    }
  });
}
function decode(imgBuffer, opts) {
  return __async(this, null, function* () {
    try {
      if (!imgBuffer || imgBuffer === "" || !opts.fname || !opts.ext) {
        return Promise.reject(new Error("image buffer, filename and extension are required parameters"));
      }
      if (typeof imgBuffer === "string") {
        imgBuffer = Buffer.from(imgBuffer, "base64");
      }
      yield write(`${opts.fname}.${opts.ext}`, imgBuffer, "base64");
      return "file written successfully to disk";
    } catch (err) {
      if (err) {
        return Promise.reject(err);
      }
      return Promise.reject(new Error("unknown error in decode"));
    }
  });
}
export {
  decode,
  encode
};
